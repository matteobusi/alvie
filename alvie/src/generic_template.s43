.include "pmem_defs.asm"
.include "sancus_macros.asm"

.set init_sp, DMEM_200
.set data_s, DMEM_240
.set data_e, DMEM_24A
.set data_s_2, DMEM_260
.set data_e_2, DMEM_26F

.set unprot_mem, DMEM_250
.set irq_cnt, DMEM_252
.set tactl_val, DMEM_254
.set time, DMEM_256
.set reti_cnt, DMEM_258

.global main

main:
	; === Setup
	mov #0x4, &tactl_val
	disable_wdt
    dint

	; === Attacker's code ===
	; [@inst_pre]
	; - May enable or disable interrupts via eint/dint
	; - May setup a timer
	; - May create an enclave and/or jump into it

	; If nothing happened, just jump to the end of the test
	br #end_of_test

unprot_code:
	nop ; Useful to reproduce B2

enc_s:
	; === Victim's code
	; [@inst_victim]
	nop  ; This is to ensure that _internal <> _start and see if jumping in a place <> _start breaks stuff
enc_internal:
	nop ; The NOP here ensures that _internal <> _end and the enclave does not end abruptly after the victim's code
	br #enc_e
enc_e:

end_of_test:
	dint
	mov #0x0, &TACTL ; Reset timer/interrupt flag
	; [@inst_post]
	mov #0xdead, r15
	br #0xffff

enc_s_2:
	nop
enc_e_2:

; Attacker's owned ISR for testing
isr_timer:
	mov #0x4, &tactl_val
	disable_wdt
    dint
	mov #0x0, &TACTL ; Reset interrupt flag, keep TAR value

	; [@inst_isr]
	br #end_of_test

; Facility for easy resetting
reset:
	mov #0x0, &WDTCTL

; Interrupt vectors
.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word isr_timer    ; Interrupt  8                      IRQ
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      SM_IRQ
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
